class Tuple1[+T1](val _1: T1)
class Tuple2[+T1, +T2](val _1: T1, val _2: T2)
class Tuple3[+T1, +T2, +T3](val _1: T1, val _2: T2, val _3: T3)
class Tuple4[+T1, +T2, +T3, +T4](val _1: T1, val _2: T2, val _3: T3, val _4: T4)

abstract class Option[A]
{
    def isEmpty : Boolean
    def get: A
    def map[B](f: (A) => B): Option[B] = if(isEmpty()) None else new Some(f(get()))
    def flatMap[B](f: (A) => Option[B]): Option[B] = if(isEmpty()) None else f(get())
    def isDefined: Boolean = isEmpty() == false
}

class Some[A](val x: A) extends Option[A]
{
    override def isEmpty : Boolean = false
    override def get : A = x
}

object Some
{
    def apply[A](x: A) : Some[A] = new Some(x)
}

object None extends Option[Nothing]
{
    override def isEmpty : Boolean = true
    override def get : Nothing = throw new Exception("Nothing to get")
}
